pc_descriptors$blsm4=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[4]]))
pc_descriptors$blsm5=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[5]]))
pc_descriptors$blsm6=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[6]]))
pc_descriptors$blsm7=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[7]]))
pc_descriptors$blsm8=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[8]]))
pc_descriptors$blsm9=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[9]]))
pc_descriptors$blsm10=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[10]]))
# Fasgai Vectors
pc_descriptors$fasV1=unlist(lapply(pc_descriptors$fasVectors,function(X) X[[1]]))
pc_descriptors$fasV2=unlist(lapply(pc_descriptors$fasVectors,function(X) X[[2]]))
pc_descriptors$fasV3=unlist(lapply(pc_descriptors$fasVectors,function(X) X[[3]]))
pc_descriptors$fasV4=unlist(lapply(pc_descriptors$fasVectors,function(X) X[[4]]))
pc_descriptors$fasV5=unlist(lapply(pc_descriptors$fasVectors,function(X) X[[5]]))
# Kidera Factors
pc_descriptors$kF1=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[1]]))
pc_descriptors$kF2=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[2]]))
pc_descriptors$kF3=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[3]]))
pc_descriptors$kF4=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[4]]))
pc_descriptors$kF5=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[5]]))
pc_descriptors$kF6=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[6]]))
pc_descriptors$kF7=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[7]]))
pc_descriptors$kF8=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[8]]))
pc_descriptors$kF9=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[9]]))
pc_descriptors$kF10=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[10]]))
# VHSE Scales
pc_descriptors$VHSE1=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[1]]))
pc_descriptors$VHSE2=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[2]]))
pc_descriptors$VHSE3=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[3]]))
pc_descriptors$VHSE4=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[4]]))
pc_descriptors$VHSE5=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[5]]))
pc_descriptors$VHSE6=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[6]]))
pc_descriptors$VHSE7=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[7]]))
pc_descriptors$VHSE8=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[8]]))
# z Scales
pc_descriptors$zSc1=unlist(lapply(pc_descriptors$z_scales,function(X) X[[1]]))
pc_descriptors$zSc2=unlist(lapply(pc_descriptors$z_scales,function(X) X[[2]]))
pc_descriptors$zSc3=unlist(lapply(pc_descriptors$z_scales,function(X) X[[3]]))
pc_descriptors$zSc4=unlist(lapply(pc_descriptors$z_scales,function(X) X[[4]]))
pc_descriptors$zSc5=unlist(lapply(pc_descriptors$z_scales,function(X) X[[5]]))
# t Scales
pc_descriptors$tSc1=unlist(lapply(pc_descriptors$t_scales,function(X) X[[1]]))
pc_descriptors$tSc1=unlist(lapply(pc_descriptors$t_scales,function(X) X[[1]]))
pc_descriptors$tSc2=unlist(lapply(pc_descriptors$t_scales,function(X) X[[2]]))
pc_descriptors$tSc3=unlist(lapply(pc_descriptors$t_scales,function(X) X[[3]]))
pc_descriptors$tSc4=unlist(lapply(pc_descriptors$t_scales,function(X) X[[4]]))
pc_descriptors$tSc5=unlist(lapply(pc_descriptors$t_scales,function(X) X[[5]]))
# st Scales
pc_descriptors$ST1=unlist(lapply(pc_descriptors$st_scales,function(X) X[[1]]))
pc_descriptors$ST2=unlist(lapply(pc_descriptors$st_scales,function(X) X[[2]]))
pc_descriptors$ST3=unlist(lapply(pc_descriptors$st_scales,function(X) X[[3]]))
pc_descriptors$ST4=unlist(lapply(pc_descriptors$st_scales,function(X) X[[4]]))
pc_descriptors$ST5=unlist(lapply(pc_descriptors$st_scales,function(X) X[[5]]))
pc_descriptors$ST6=unlist(lapply(pc_descriptors$st_scales,function(X) X[[6]]))
pc_descriptors$ST7=unlist(lapply(pc_descriptors$st_scales,function(X) X[[7]]))
pc_descriptors$ST8=unlist(lapply(pc_descriptors$st_scales,function(X) X[[8]]))
# protFP
pc_descriptors$FP1=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[1]]))
pc_descriptors$FP2=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[2]]))
pc_descriptors$FP3=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[3]]))
pc_descriptors$FP4=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[4]]))
pc_descriptors$FP5=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[5]]))
pc_descriptors$FP6=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[6]]))
pc_descriptors$FP7=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[7]]))
pc_descriptors$FP8=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[8]]))
pc_descriptors <- pc_descriptors[-c((pre_cols+1):post_cols)]
#save(pc_descriptors, file = 'benchmarking/dataframes/peptide_descriptors_ROC_20210621.rdata')
test_peptides <- model_predict(RF_model = RFmodel, descriptors = pc_descriptors,col_name = 'allFeat_10kTS(B2)', pep_list = test_peptides )
test_peptides <- model_predict(RF_model = RF_model, descriptors = pc_descriptors,col_name = 'allFeat_10kTS(B2)', pep_list = test_peptides )
# Adds peptide detectability predictions by selected model to specified column in pepitde df
model_predict <- function(RF_model, descriptors, col_name, pep_list){
predictions = predict(RF_model, descriptors)
pep_list[[col_name]] <- predictions
return(pep_list)
}
test_peptides <- model_predict(RF_model = RF_model, descriptors = pc_descriptors,col_name = 'allFeat_10kTS(B2)', pep_list = test_peptides )
View(test_peptides)
require(pROC)
library(caret)
prediction_colNames <- colnames(test_peptides)[12:ncol(test_peptides)]
ROC_summary <- data.frame()
actual <- test_peptides$ratio
pos_cutoff <- quantile(test_peptides$ratio, prob = 0.9)
prediction_colNames <- colnames(test_peptides)[12:ncol(test_peptides)]
ROC_summary <- data.frame()
actual <- test_peptides$ratio
pos_cutoff <- quantile(test_peptides$ratio, prob = 0.9)
#i = 9
for(i in 1:length(prediction_colNames)){
print(i)
current_predictor <- prediction_colNames[i]
results <- data.frame(actual)
results$prediction <- test_peptides[,current_predictor]
#pos_cutoff <- quantile(results$prediction, prob = 0.8)
roc_rfmodel=plot.roc(x = results$actual>=pos_cutoff,predictor = results$prediction)
results$actual_cat=ifelse(results$actual>=pos_cutoff,
"GOOD","POOR")
results$prediction_cat=ifelse(results$prediction>=quantile(results$prediction, prob = 0.9),
"GOOD","POOR")
cm=confusionMatrix(as.factor(results$actual_cat),as.factor(results$prediction_cat))
ROC_summary <- rbind(ROC_summary, current_predictor)
ROC_summary$AUC[i] <- round(roc_rfmodel[["auc"]][1],3)
ROC_summary$sensitvity[i] <- round(cm$byClass[1],3)
ROC_summary$specificity[i] <- round(cm$byClass[2],3)
ROC_summary$precision[i] <- round(cm$byClass[5],3)
# ROC_summary <- rbind(ROC_summary, current_predictor)
# ROC_summary$AUC[i] <- roc_rfmodel[["auc"]][1]
# ROC_summary$sensitvity[i] <- cm$byClass[1]
# ROC_summary$specificity[i] <- cm$byClass[2]
# ROC_summary$precision[i] <- cm$byClass[5]
}
View(ROC_summary)
comparison_summary <- readxl::read_xlsx("benchmarking/topn_summary_20210726.xlsx")
pc_descriptors <- select(test_peptides, sequence, missed_cleavages)
load('benchmarking/dataframes/peptideTestSet_topn_predictions_20210726.rdata')
pc_descriptors <- select(test_peptides, sequence, missed_cleavages)
library(Peptides)
# Bulk property calculation
pre_cols <- ncol(pc_descriptors)
pc_descriptors$cruciani=crucianiProperties(pc_descriptors$sequence)
pc_descriptors$mswhimScores=mswhimScores(pc_descriptors$sequence)
pc_descriptors$blosumIndices=blosumIndices(pc_descriptors$sequence)
pc_descriptors$fasVectors=fasgaiVectors(pc_descriptors$sequence)
pc_descriptors$kiFactors=kideraFactors(pc_descriptors$sequence)
pc_descriptors$VHSE_Scales=vhseScales(pc_descriptors$sequence)
pc_descriptors$z_scales=zScales(pc_descriptors$sequence)
pc_descriptors$t_scales=tScales(pc_descriptors$sequence)
pc_descriptors$st_scales=stScales(pc_descriptors$sequence)
pc_descriptors$prot_FP=protFP(pc_descriptors$sequence)
post_cols <- ncol(pc_descriptors)
# calculates and adds individual phsyiochem features
pc_descriptors$mw=mw(pc_descriptors$sequence)
pc_descriptors$pI=pI(pc_descriptors$sequence)
pc_descriptors$hydropho=hydrophobicity(pc_descriptors$sequence)
pc_descriptors$charge_ph7=charge(pc_descriptors$sequence)
pc_descriptors$charge_ph2=charge(pc_descriptors$sequence, pH = 2)
pc_descriptors$hmoment=hmoment(pc_descriptors$sequence)
pc_descriptors$aIndex=aIndex(pc_descriptors$sequence)
pc_descriptors$instaIndex=instaIndex(pc_descriptors$sequence)
pc_descriptors$boman=boman(pc_descriptors$sequence)
# Cruciani Properties
pc_descriptors$PP1=unlist(lapply(pc_descriptors$cruciani,function(X) X[[1]]))
pc_descriptors$PP2=unlist(lapply(pc_descriptors$cruciani,function(X) X[[2]]))
pc_descriptors$PP3=unlist(lapply(pc_descriptors$cruciani,function(X) X[[3]]))
# MSWHIM Scores
pc_descriptors$MSWHIM1=unlist(lapply(pc_descriptors$mswhimScores,function(X) X[[1]]))
pc_descriptors$MSWHIM2=unlist(lapply(pc_descriptors$mswhimScores,function(X) X[[2]]))
pc_descriptors$MSWHIM3=unlist(lapply(pc_descriptors$mswhimScores,function(X) X[[3]]))
# BLOSUM Indices
pc_descriptors$blsm1=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[1]]))
pc_descriptors$blsm2=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[2]]))
pc_descriptors$blsm3=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[3]]))
pc_descriptors$blsm4=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[4]]))
pc_descriptors$blsm5=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[5]]))
pc_descriptors$blsm6=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[6]]))
pc_descriptors$blsm7=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[7]]))
pc_descriptors$blsm8=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[8]]))
pc_descriptors$blsm9=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[9]]))
pc_descriptors$blsm10=unlist(lapply(pc_descriptors$blosumIndices,function(X) X[[10]]))
# Fasgai Vectors
pc_descriptors$fasV1=unlist(lapply(pc_descriptors$fasVectors,function(X) X[[1]]))
pc_descriptors$fasV2=unlist(lapply(pc_descriptors$fasVectors,function(X) X[[2]]))
pc_descriptors$fasV3=unlist(lapply(pc_descriptors$fasVectors,function(X) X[[3]]))
pc_descriptors$fasV4=unlist(lapply(pc_descriptors$fasVectors,function(X) X[[4]]))
pc_descriptors$fasV5=unlist(lapply(pc_descriptors$fasVectors,function(X) X[[5]]))
# Kidera Factors
pc_descriptors$kF1=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[1]]))
pc_descriptors$kF2=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[2]]))
pc_descriptors$kF3=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[3]]))
pc_descriptors$kF4=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[4]]))
pc_descriptors$kF5=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[5]]))
pc_descriptors$kF6=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[6]]))
pc_descriptors$kF7=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[7]]))
pc_descriptors$kF8=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[8]]))
pc_descriptors$kF9=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[9]]))
pc_descriptors$kF10=unlist(lapply(pc_descriptors$kiFactors,function(X) X[[10]]))
# VHSE Scales
pc_descriptors$VHSE1=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[1]]))
pc_descriptors$VHSE2=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[2]]))
pc_descriptors$VHSE3=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[3]]))
pc_descriptors$VHSE4=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[4]]))
pc_descriptors$VHSE5=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[5]]))
pc_descriptors$VHSE6=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[6]]))
pc_descriptors$VHSE7=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[7]]))
pc_descriptors$VHSE8=unlist(lapply(pc_descriptors$VHSE_Scales,function(X) X[[8]]))
# z Scales
pc_descriptors$zSc1=unlist(lapply(pc_descriptors$z_scales,function(X) X[[1]]))
pc_descriptors$zSc2=unlist(lapply(pc_descriptors$z_scales,function(X) X[[2]]))
pc_descriptors$zSc3=unlist(lapply(pc_descriptors$z_scales,function(X) X[[3]]))
pc_descriptors$zSc4=unlist(lapply(pc_descriptors$z_scales,function(X) X[[4]]))
pc_descriptors$zSc5=unlist(lapply(pc_descriptors$z_scales,function(X) X[[5]]))
# t Scales
pc_descriptors$tSc1=unlist(lapply(pc_descriptors$t_scales,function(X) X[[1]]))
pc_descriptors$tSc2=unlist(lapply(pc_descriptors$t_scales,function(X) X[[2]]))
pc_descriptors$tSc3=unlist(lapply(pc_descriptors$t_scales,function(X) X[[3]]))
pc_descriptors$tSc4=unlist(lapply(pc_descriptors$t_scales,function(X) X[[4]]))
pc_descriptors$tSc5=unlist(lapply(pc_descriptors$t_scales,function(X) X[[5]]))
# st Scales
pc_descriptors$ST1=unlist(lapply(pc_descriptors$st_scales,function(X) X[[1]]))
pc_descriptors$ST2=unlist(lapply(pc_descriptors$st_scales,function(X) X[[2]]))
pc_descriptors$ST3=unlist(lapply(pc_descriptors$st_scales,function(X) X[[3]]))
pc_descriptors$ST4=unlist(lapply(pc_descriptors$st_scales,function(X) X[[4]]))
pc_descriptors$ST5=unlist(lapply(pc_descriptors$st_scales,function(X) X[[5]]))
pc_descriptors$ST6=unlist(lapply(pc_descriptors$st_scales,function(X) X[[6]]))
pc_descriptors$ST7=unlist(lapply(pc_descriptors$st_scales,function(X) X[[7]]))
pc_descriptors$ST8=unlist(lapply(pc_descriptors$st_scales,function(X) X[[8]]))
# protFP
pc_descriptors$FP1=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[1]]))
pc_descriptors$FP2=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[2]]))
pc_descriptors$FP3=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[3]]))
pc_descriptors$FP4=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[4]]))
pc_descriptors$FP5=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[5]]))
pc_descriptors$FP6=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[6]]))
pc_descriptors$FP7=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[7]]))
pc_descriptors$FP8=unlist(lapply(pc_descriptors$prot_FP,function(X) X[[8]]))
pc_descriptors <- pc_descriptors[-c((pre_cols+1):post_cols)]
library(randomForest)
# Adds peptide detectability predictions by selected model to specified column in pepitde df
model_predict <- function(RF_model, descriptors, col_name, pep_list){
predictions = predict(RF_model, descriptors)
pep_list[[col_name]] <- predictions
return(pep_list)
}
test_peptides <- model_predict(RF_model = RF_model, descriptors = pc_descriptors,col_name = 'allFeat_10kTS(B2)', pep_list = test_peptides )
# function to select top n peps given prots and ranked/scaled peps
top_n_peptides <- function(pep_predictions, protein_list, n_peps, predictor_name){
res_peps <- data.frame()
for(i in 1:nrow(test_prots)){
curr_protein <- test_prots[i,1]
curr_peps <- filter(pep_predictions, uniprot == curr_protein)
curr_peps <- dplyr::arrange(curr_peps, desc(curr_peps[[predictor_name]]))
res_peps <- rbind(res_peps, curr_peps[1:5,])
res_peps <- na.omit(res_peps)
}
return(res_peps)
}
# create reference of top possible n peps by ratio
reference_peps <- top_n_peptides(pep_predictions = test_peptides, protein_list = test_prots, n_peps = 5, predictor_name = 'ratio')
test_prots <- data.frame(test_peptides$uniprot)
test_prots <- data.frame(unique(test_peptides$uniprot))
View(test_prots)
colnames(test_prots)[1] <- "uniprot"
# create reference of top possible n peps by ratio
reference_peps <- top_n_peptides(pep_predictions = test_peptides, protein_list = test_prots, n_peps = 5, predictor_name = 'ratio')
# col names of predictors ## set the starting col
predictors <- c(colnames(test_peptides)[10:ncol(test_peptides)])
comparison_summary <- data.frame()
# add comparison stats for top n ranked peptides
for(i in 1:length(predictors)){
curr_results <- top_n_peptides(pep_predictions = test_peptides, protein_list = test_prots, n_peps = 5, predictor_name = predictors[i])
comparison_summary <- rbind(comparison_summary, predictors[i])
comparison_summary$top_overlap[i] <- round(sum(curr_results$sequence %in% reference_peps$sequence)/nrow(reference_peps),2)
comparison_summary$ratio_80[i] <- round(sum(curr_results$ratio > 0.8)/nrow(reference_peps),2)
comparison_summary$quantile_80[i] <- round(sum(curr_results$ratio > quantile(test_peptides$ratio, prob = 0.8))/nrow(reference_peps),2)
print(i)
}
colnames(comparison_summary)[1] <- 'predictor'
View(comparison_summary)
training_peptidome <- PeptideRanger::peptides_inReference(peptidome = PeptideRanger::SwissProt2018_peptidome,
pep_reference = PeptideRanger::ProtDB_exp_counts,
reference_name = "ProtDB",
exp_counts_col = "n_obs_pep",
detection_freq = TRUE,
detection_ratio = TRUE)
peptidome <- training_peptidome
reference_name <- "ProtDB"
n_obs_prot_name <- paste0(reference_name, "_n_obs_prot")
top10 <- quantile(peptidome[[n_obs_prot_name]], prob = 0.9)
training_peptides <- peptidome[peptidome[[n_obs_prot_name]] >= top10,]
ratio_name <- paste0(reference_name, "_ratio")
detected_peptides <- training_peptides[training_peptides[[ratio_name]] >= quantile(training_peptides[[ratio_name]], prob = 0.9)]
detected_peptides <- training_peptides[training_peptides[[ratio_name]] >= quantile(training_peptides[[ratio_name]], prob = 0.9),]
View(training_peptides)
View(detected_peptides)
detected_peptides <- sample_n(detected_peptides, 5000)
undetected_peptides <- training_peptides[training_peptides[[ratio_name]] == 0,]
undetected_peptides <- dplyr::sample_n(training_peptides, 5000)
training_peptides <- rbind(detected_peptides, undetected_peptides)
pc_descriptors <- training_peptides[,c(ratio_name, "sequence", "missed_cleavages")]
colnames(pc_descriptors)[1] <- "ratio"
pc_descriptors <- calculate_pc_descriptors(pc_descriptors = pc_descriptors)
pc_descriptors <- PeptideRanger:::calculate_pc_descriptors(pc_descriptors = pc_descriptors)
pc_descriptors$sequence <- NULL
View(pc_descriptors)
print(run.time, "h")
run.time <- "E"
print(run.time, "h")
print(paste0("Model training time was ", run.time))
start.time<-proc.time()
RFmodel <- randomForest(ratio~., data = pc_descriptors, ntree = 500, importance = TRUE )
stop.time<-proc.time()
run.time<-stop.time-start.time
run.time
print(paste0("Model training time was ", run.time))
run.time[1]
run.time[2]
run.time[3]
print(paste0("Model training time was ", run.time[3]))
print(paste0("Model training time was ", run.time[3]/60))
print(paste0("Model training time was ", round(run.time[3]/60,3)))
print(paste0("Model training time was ", round(run.time[3]/60,2)))
print(paste0("Model training time was ", round(run.time[3]/60,2)), " minutes")
print(paste0("Model training time was ", round(run.time[3]/60,2)), " minutes")
print(paste0("Model training time was ", round(run.time[3]/60,2)))
print(paste0("Model training time = ", round(run.time[3]/60,2)))
print(paste0("Model training time = ", round(run.time[3]/60,2), " minutes"))
?PeptideRanger::train_RFmodel
roxygen2::roxygenise()
# -- set WD --
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("..")
roxygen2::roxygenise()
?PeptideRanger::train_RFmode
?PeptideRanger::train_RFmodel
roxygen2::roxygenise()
roxygen2::roxygenise()
?PeptideRanger::train_RFmodel
library(PeptideRanger)
library(dplyr)
target_proteins <- sample_n(PeptideRanger::SwissProt2018_peptidome, 300)
target_proteins <- unique(PeptideRanger::SwissProt2018_peptidome$uniprot)
library(PeptideRanger)
library(dplyr)
target_proteins <- unique(PeptideRanger::SwissProt2018_peptidome$uniprot)
target_proteins <- sample(unique(PeptideRanger::SwissProt2018_peptidome$uniprot),300)
target_proteins <- sample(unique(PeptideRanger::SwissProt2018_peptidome$uniprot),300)
roxygen2::roxygenise()
library(PeptideRanger)
library(dplyr)
target_proteins <- sample(unique(PeptideRanger::SwissProt2018_peptidome$uniprot),300)
peptide_list <- PeptideRanger::prioritize_peptides(uniprot_list = target_proteins,
max_n = 5,
peptidome = PeptideRanger::SwissProt2018_peptidome,
prediction_model = PeptideRanger::RFmodel_ProteomicsDB,
priorities = "RF_score",
priority_thresholds = 0)
View(peptide_list)
target_proteins <- sample(unique(PeptideRanger::SwissProt2018_peptidome$uniprot), 100)
peptide_list <- PeptideRanger::prioritize_peptides(uniprot_list = target_proteins,
max_n = 5,
peptidome = PeptideRanger::SwissProt2018_peptidome,
prediction_model = PeptideRanger::RFmodel_ProteomicsDB,
priorities = "RF_score",
priority_thresholds = 0)
getwd
getwd)_
getwd)_()
getwd()
# Generates a peptidome of unique peptides from a proteome fasta file
novel_peptidome <- PeptideRanger::create_peptidome(proteome_dir = "data_toAdd/uniprot_homo_20180803_swissprot_isoforms.fasta",
missed_cleavages = c(0,2),
synth_peps = TRUE,
aa_range = c(6,25))
View(novel_peptidome)
peptide_list <- PeptideRanger::prioritize_peptides(uniprot_list = target_proteins,
max_n = 5,
peptidome = novel_peptidome,
prediction_model = PeptideRanger::RFmodel_ProteomicsDB,
priorities = "RF_score",
priority_thresholds = 0)
# Selects top peptides for target protein list based on priorities
peptide_list <- PeptideRanger::prioritize_peptides(uniprot_list = target_proteins,
max_n = 5,
peptidome = PeptideRanger::SwissProt2018_peptidome,
prediction_model = PeptideRanger::RFmodel_ProteomicsDB,
priorities = "RF_score",
priority_thresholds = 0)
peptide_list <- PeptideRanger::prioritize_peptides(uniprot_list = target_proteins,
max_n = 5,
peptidome = novel_peptidome,
prediction_model = PeptideRanger::RFmodel_ProteomicsDB,
priorities = "RF_score",
priority_thresholds = 0)
View(peptide_list)
CPTAC_peptidome <- PeptideRanger::peptides_inReference(peptidome = PeptideRanger::SwissProt2018_peptidome_synth,
pep_reference = PeptideRanger::CPTAC_exp_counts,
reference_name = "CPTAC",
exp_counts_col = "n_obs_pep",
detection_freq = TRUE,
detection_ratio = TRUE)
synthetic_library <- PeptideRanger::SwissProt2018_peptidome_synth[PeptideRanger::SwissProt2018_peptidome_synth$uniprot %in% target_proteins]
synthetic_library <- PeptideRanger::SwissProt2018_peptidome_synth[PeptideRanger::SwissProt2018_peptidome_synth$uniprot %in% target_proteins,]
synthetic_library <- sample(PeptideRanger::SwissProt2018_peptidome_synth[PeptideRanger::SwissProt2018_peptidome_synth$uniprot %in% target_proteins,], 1000)
synthetic_library <- PeptideRanger::SwissProt2018_peptidome_synth[PeptideRanger::SwissProt2018_peptidome_synth$uniprot %in% target_proteins,]
synthetic_library <- sample_n(PeptideRanger::SwissProt2018_peptidome_synth[PeptideRanger::SwissProt2018_peptidome_synth$uniprot %in% target_proteins,], 1000)
View(synthetic_library)
CPTAC_peptidome <- PeptideRanger::peptides_inReference(peptidome = PeptideRanger::SwissProt2018_peptidome_synth,
pep_reference = PeptideRanger::CPTAC_exp_counts,
reference_name = "CPTAC",
exp_counts_col = "n_obs_pep",
detection_freq = TRUE,
detection_ratio = TRUE)
CPTAC_peptidome <- PeptideRanger::peptides_inReference(peptidome = CPTAC_peptidome,
reference_name = "synth_library")
CPTAC_peptidome <- PeptideRanger::peptides_inReference(peptidome = CPTAC_peptidome,
pep_reference = synthetic_library
reference_name = "synth_library")
CPTAC_peptidome <- PeptideRanger::peptides_inReference(peptidome = CPTAC_peptidome,
pep_reference = synthetic_library,
reference_name = "synth_library")
CPTAC_RFmodel <- PeptideRanger::train_RFmodel(peptidome = CPTAC_peptidome,
reference_name = "CPTAC")
peptide_list <- PeptideRanger::prioritize_peptides(uniprot_list = target_proteins,
max_n = 5,
peptidome = CPTAC_peptidome,
prediction_model = CPTAC_RFmodel,
priorities = c("synth_library", "CPTAC_freq", "RF_score"),
priority_thresholds = c(TRUE, 0.8, 0))
View(peptide_list)
synthetic_library <- sample_n(PeptideRanger::SwissProt2018_peptidome_synth[PeptideRanger::SwissProt2018_peptidome_synth$uniprot %in% target_proteins,], 500)
CPTAC_peptidome <- PeptideRanger::peptides_inReference(peptidome = CPTAC_peptidome,
pep_reference = synthetic_library,
reference_name = "synth_library")
peptide_list <- PeptideRanger::prioritize_peptides(uniprot_list = target_proteins,
max_n = 5,
peptidome = CPTAC_peptidome,
prediction_model = CPTAC_RFmodel,
priorities = c("synth_library", "CPTAC_freq", "RF_score"),
priority_thresholds = c(TRUE, 0.8, 0))
CPTAC_peptidome <- PeptideRanger::peptides_inReference(peptidome = PeptideRanger::SwissProt2018_peptidome_synth,
pep_reference = PeptideRanger::CPTAC_exp_counts,
reference_name = "CPTAC",
exp_counts_col = "n_obs_pep",
detection_freq = TRUE,
detection_ratio = TRUE)
View(peptide_list)
synthetic_library <- sample_n(PeptideRanger::SwissProt2018_peptidome_synth[PeptideRanger::SwissProt2018_peptidome_synth$uniprot %in% target_proteins,], 200)
View(novel_peptidome)
View(peptide_list)
View(novel_peptidome)
View(CPTAC_peptidome)
CPTAC_peptidome <- PeptideRanger::peptides_inReference(peptidome = PeptideRanger::SwissProt2018_peptidome_synth,
pep_reference = PeptideRanger::CPTAC_exp_counts,
reference_name = "CPTAC",
exp_counts_col = "n_obs_pep",
detection_freq = TRUE,
detection_ratio = TRUE)
CPTAC_peptidome <- PeptideRanger::peptides_inReference(peptidome = CPTAC_peptidome,
pep_reference = synthetic_library,
reference_name = "synth_library")
View(CPTAC_peptidome)
sum(CPTAC_peptidome$synth_library == TRUE)
synthetic_library <- sample_n(PeptideRanger::SwissProt2018_peptidome_synth[PeptideRanger::SwissProt2018_peptidome_synth$uniprot %in% target_proteins,], 500)
CPTAC_peptidome <- PeptideRanger::peptides_inReference(peptidome = CPTAC_peptidome,
pep_reference = synthetic_library,
reference_name = "synth_library")
sum(CPTAC_peptidome$synth_library == TRUE)
synthetic_library <- sample_n(PeptideRanger::SwissProt2018_peptidome_synth[PeptideRanger::SwissProt2018_peptidome_synth$uniprot %in% target_proteins,], 200)
CPTAC_peptidome <- PeptideRanger::peptides_inReference(peptidome = CPTAC_peptidome,
pep_reference = synthetic_library,
reference_name = "synth_library")
synthetic_library <- sample_n(PeptideRanger::SwissProt2018_peptidome_synth[PeptideRanger::SwissProt2018_peptidome_synth$uniprot %in% target_proteins,], 200)
CPTAC_peptidome <- PeptideRanger::peptides_inReference(peptidome = CPTAC_peptidome,
pep_reference = synthetic_library,
reference_name = "synth_library")
peptide_list <- PeptideRanger::prioritize_peptides(uniprot_list = target_proteins,
max_n = 5,
peptidome = CPTAC_peptidome,
prediction_model = CPTAC_RFmodel,
priorities = c("synth_library", "CPTAC_freq", "RF_score"),
priority_thresholds = c(TRUE, 0.8, 0))
View(peptide_list)
peps_ofInterest <- sample_n(PeptideRanger::SwissProt2018_peptidome, 100)
PeptideRanger::peptide_predictions(peptides = peps_ofInterest$sequence,
prediction_model = PeptideRanger::RFmodel_ProteomicsDB,
missed_cleavages = peps_ofInterest$missed_cleavages)
predictions <- PeptideRanger::peptide_predictions(peptides = peps_ofInterest$sequence,
prediction_model = PeptideRanger::RFmodel_ProteomicsDB)
View(predictions)
prediction <- PeptideRanger::peptide_predictions(peptides = "PEPTIDERANGER",
prediction_model = PeptideRanger::RFmodel_ProteomicsDB)
View(predictions)
View(prediction)
PeptideRanger::peptide_predictions(peptides = "PEPTIDERANGER",
prediction_model = PeptideRanger::RFmodel_ProteomicsDB)
rmarkdown::pandoc_version()
.libPaths()
devtools::install("PeptideRanger")
# -- set WD --
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("..")
getwd()
library(dplyr)
# SwissProt Peptidome
load("data_toAdd/SwissProt2018_peptidome_20210624.rdata")
# synth SwissProt Peptidome
load("data_toAdd/SwissProt2018_peptidome_synth_20210624.rdata")
# ProtDB RF Model
load('data_toAdd/2021-07-12_RFmodel-7.RData')
RFmodel_ProteomicsDB <- RFmodel
# CPTAC RF Model
load('data_toAdd/2021-07-30_RFmodel-1.RData')
RFmodel_CPTAC <- RFmodel
# tm_peptides
load('data_toAdd/tm_peptides.rdata')
# ProtDB_exp_counts
load('data_toAdd/ProteomicsDB_exp_counts_20210621.rdata')
# CPTAC_exp_counts
load("data_toAdd/CPTAC_exp_counts_20210621.rdata")
usethis::proj_get()
paste0(getwd(),"/PeptideRanger")
setwd(paste0(getwd(),"/PeptideRanger"))
usethis::proj_get()
# save data internally
usethis::use_data(SwissProt2018_peptidome,
SwissProt2018_peptidome_synth,
RFmodel_ProteomicsDB,
RFmodel_CPTAC,
tm_peptides,
ProtDB_exp_counts,
CPTAC_exp_counts,
internal = FALSE,
overwrite = TRUE)
